apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

sourceCompatibility = 11

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

def version = '1.0.3'
def title = 'JMeterInfluxDBListener'

jar {
    manifest {
        attributes 'Implementation-Title': title,
                   'Implementation-Version': version
    }
}

repositories {
  maven{
  	url "https://repo.maven.apache.org/maven2"
  	metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
  }
}
dependencies {
	compileOnly group: 'org.apache.jmeter', name: 'ApacheJMeter_core', version: '5.4'
	compileOnly group: 'org.apache.jmeter', name: 'ApacheJMeter_components', version: '5.4'
	compile group: 'org.influxdb', name: 'influxdb-java', version: '2.4'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
	compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
	compile group: 'com.google.guava', name: 'guava', version: '30.0-jre'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.0'
	testImplementation group: 'org.junit.jupiter', name:'junit-jupiter', version:'5.7.0'
	testRuntime group: 'org.junit.jupiter', name:'junit-jupiter-engine', version :'5.7.0'
	testCompile group: "com.github.tomakehurst",name :"wiremock-jre8", version:"2.27.2"
	testCompile group: 'org.apache.jmeter', name: 'ApacheJMeter_core', version: '5.4'
	testCompile group: 'org.apache.jmeter', name: 'ApacheJMeter_components', version: '5.4'
}

test {
 	testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        events = ["failed", "skipped"]
    }
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
		attributes 'Implementation-Title': title,
			'Implementation-Version': version
	}
	baseName = project.name + '-plugin'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

task copyTask(type: Copy) {
    from 'build/libs/.'
    into './'
}

task copyCodeCoverage(type: Copy){
 	from 'build/reports/jacoco/test/.'
    into './'
}

task copyTaskToJmeterDebug(type: Copy){
 	def jmeterPath = System.env.JMETER_HOME
 	def fileLibDebugPath = jmeterPath + "/lib/ext/" + "jmeter-backend-listener-plugin" + ".jar"
 	boolean fileSuccessfullyDeleted = new File(fileLibDebugPath).delete() 
 	println "Clean old lib successfully: " + fileSuccessfullyDeleted
 	from 'build/libs/.'
    into jmeterPath + "/lib/ext/"
}

task packageDistribution(type: Zip) {
    archiveFileName = "toilatester-jmeter-plugin.zip"
    destinationDirectory = file("$buildDir/../")

    from "$buildDir/libs"
}


task releasePlugin{
    dependsOn 'clean'
    dependsOn 'fatJar'
    dependsOn 'copyTask'
    dependsOn 'packageDistribution'
    tasks.findByName('fatJar').mustRunAfter 'clean'
    tasks.findByName('copyTask').mustRunAfter 'fatJar'
    tasks.findByName('packageDistribution').mustRunAfter 'fatJar'
    
}

task releaseHotDebug{
    dependsOn 'fatJar'
    dependsOn 'copyTaskToJmeterDebug'
    tasks.findByName('fatJar').mustRunAfter 'clean'
    tasks.findByName('copyTaskToJmeterDebug').mustRunAfter 'fatJar'
}
